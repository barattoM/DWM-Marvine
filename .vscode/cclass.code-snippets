{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Creation de classe": {
		"prefix": "cclass",
		"body": [
		  "Class XXX{",
		  "    /***************************** Attributs *****************************/",
		  "    private $$XXX;",
		  "    /********************************Accesseurs **************************/",
		  "",
		  "    /*********************** Constructeur *********************************/",
		  "",
		  "    public function __construct(array $$options = [])",
		  "    {",
		  "        if (!empty($$options)) // empty : renvoi vrai si le tableau est vide",
		  "        {",
		  "            $$this->hydrate($$options);",
		  "        }",
		  "    }",
		  "    public function hydrate($$data)",
		  "    {",
		  "        foreach ($$data as $$key => $$value)",
		  "        {",
		  "            $$methode = \"set\" . ucfirst($$key); //ucfirst met la 1ere lettre en majuscule",
		  "            if (is_callable(([$$this, $$methode]))) // is_callable verifie que la methode existe",
		  "            {",
		  "                $$this->$$methode($$value);",
		  "            }",
		  "        }",
		  "    }",
		  "",
		  "    /********************************Methode *****************************/",
		  "",
		  "    /**",
		  "    * Transforme l'objet en chaine de caractères",
		  "    *",
		  "    * @return String",
		  "    */",
		  "    public function toString(){",
		  "        return \"\";",
		  "    }",
		  "    /**",
		  "    * Renvoi vrai si l'objet en paramètre est égal à l'objet appelant",
		  "    *",
		  "    * @param [type] obj",
		  "    * @return bool",
		  "    */",
		  "    public function equalsTo(){",
		  "        return  \"\";",
		  "    }",
		  "    /**",
		  "    * Compare 2 objets",
		  "    * Renvoi 1 si le 1er est >",
		  "    *        0 si ils sont égaux",
		  "    *        -1 si le 1er est <",
		  "    *",
		  "    * @param [type] obj1",
		  "    * @param [type] obj2",
		  "    * @return void",
		  "    */",
		  "    public function compareTo(){",
		  "        return \"\";",
		  "    }",
		  "",
		  "}"
		],
		"description": "Creation de classe"
	  }
	}